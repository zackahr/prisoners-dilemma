services:
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    restart: always
    networks:
      - backend

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email zakaria.ezzine@um6p.ma --agree-tos --no-eff-email -d gametheory.socialinteractionlab.org
    networks:
      - backend

  backend:
    build: ./backend
    container_name: backend
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy 
      redis:
        condition: service_healthy 
    expose:
      - "8001"
    networks:
      - backend
    volumes:
      - ./backend/game:/app
    init: true
    healthcheck:
      test: ["CMD-SHELL", "python manage.py check --database default || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  db:
    image: postgres:13
    container_name: db
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    init: true

  redis:
    image: redis:7
    container_name: redis
    env_file:
      - .env
    networks:
      - backend
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    init: true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    expose:
      - "3000"
    depends_on:
      - backend
    networks:
      - backend
    volumes:
      - ./backend/assets:/usr/share/nginx/html/assets
    restart: always
    init: true

volumes:
  nginx-logs:
  nginx-run:

networks:
  backend:
    driver: bridge
