can I update just the front end when a player don't submit offer in 15 second must redirect him to /ultimatum this is GamePage.jsx : import { useState, useEffect, useCallback } from "react"
import {
  Clock,
  DollarSign,
  CheckCircle,
  XCircle,
  Wifi,
  WifiOff,
  Loader2,
} from "lucide-react"
import { useNavigate, useSearchParams } from "react-router-dom"

import PayoffsTable from "./PayoffsTable"
import { useWebSocket } from "../hooks/useWebSocket"
import { gameApi, getPlayerFingerprint } from "../services/gameApi"
import "./GamePage.css"

const MAX_ROUNDS = 25
const TOTAL_MONEY = 100

export default function GamePage() {
  const navigate = useNavigate()
  const [searchParams] = useSearchParams()

  const gameMode = searchParams.get("mode") || "online"
  const urlMatchId = searchParams.get("match") || null

  const [playerFingerprint] = useState(() => getPlayerFingerprint())
  const [matchId, setMatchId] = useState(urlMatchId)
  const [isInitializing, setIsInitializing] = useState(true)

  // Game state for simultaneous play
  const [inputOffer, setInputOffer] = useState("")
  const [timeLeft, setTimeLeft] = useState(30)
  const [currentPhase, setCurrentPhase] = useState("waiting") // "waiting" | "offering" | "responding" | "result"

  const { gameState, connectionStatus, error, sendMessage } =
    useWebSocket(matchId, playerFingerprint)

  // Initialize match
  useEffect(() => {
    const initializeMatch = async () => {
      if (urlMatchId) {
        console.log("🔗 Using existing match from URL:", urlMatchId)
        console.log("👤 Using fingerprint:", playerFingerprint)
        setMatchId(urlMatchId)
        setIsInitializing(false)
        return
      }

      try {
        console.log("🚀 Initializing new match with mode:", gameMode)
        console.log("👤 Using fingerprint:", playerFingerprint)
        const matchData = await gameApi.createMatch(gameMode, playerFingerprint)
        console.log("✅ Match initialized:", matchData.match_id)
        setMatchId(matchData.match_id)
      } catch (err) {
        console.error("❌ Failed to initialize match:", err)
      } finally {
        setIsInitializing(false)
      }
    }

    initializeMatch()
  }, [gameMode, playerFingerprint, urlMatchId])

  // Determine current phase based on game state
  useEffect(() => {
    if (!gameState) return

    console.log("🎮 Processing game state update:", gameState)

    if (gameState.gameOver) {
      setCurrentPhase("result")
      return
    }

    if (gameState.waitingForOpponent) {
      setCurrentPhase("waiting")
      return
    }

    const currentRound = gameState.currentRoundState
    if (!currentRound) {
      // If no current round state, default to offering phase
      console.log("🎯 No current round state, defaulting to offering phase")
      setCurrentPhase("offering")
      setTimeLeft(30)
      return
    }

    const isPlayer1 = gameState.player1Fingerprint === playerFingerprint
    const isPlayer2 = gameState.player2Fingerprint === playerFingerprint

    // Determine what the current player needs to do
    const myOfferMade = isPlayer1 ? currentRound.player1OfferMade : currentRound.player2OfferMade
    const myResponseMade = isPlayer1 ? currentRound.player1ResponseMade : currentRound.player2ResponseMade
    const opponentOfferMade = isPlayer1 ? currentRound.player2OfferMade : currentRound.player1OfferMade
    const bothOffersMade = currentRound.player1OfferMade && currentRound.player2OfferMade

    console.log("🎯 Phase analysis:", {
      isPlayer1,
      isPlayer2,
      myOfferMade,
      myResponseMade,
      opponentOfferMade,
      bothOffersMade,
      currentRound
    })

    // Priority 1: If I haven't made my offer yet, I should be offering
    if (!myOfferMade) {
      console.log("🎯 Setting phase to offering - my offer not made")
      setCurrentPhase("offering")
      setTimeLeft(30)
      return
    }

    // Priority 2: If both offers are made but I haven't responded, I should be responding
    if (bothOffersMade && !myResponseMade) {
      console.log("🎯 Setting phase to responding - both offers made, my response not made")
      setCurrentPhase("responding")
      setTimeLeft(30)
      return
    }

    // Priority 3: Otherwise, I'm waiting
    console.log("🎯 Setting phase to waiting - all my actions complete")
    setCurrentPhase("waiting")
    setTimeLeft(15)
  }, [gameState, playerFingerprint])

  // Timer countdown
  useEffect(() => {
    if (timeLeft <= 0 || currentPhase === "waiting" || currentPhase === "result") return

    const timer = setTimeout(() => {
      setTimeLeft((prev) => prev - 1)
    }, 1000)
    return () => clearTimeout(timer)
  }, [timeLeft, currentPhase])

  // Submit offer
  const submitOffer = useCallback(() => {
    const offer = Math.max(0, Math.min(+inputOffer || 0, TOTAL_MONEY))
    console.log("💰 Submitting offer:", offer)

    const success = sendMessage({
      action: "make_offer",
      player_fingerprint: playerFingerprint,
      offer: offer,
    })

    if (success) {
      setInputOffer("")
    }
  }, [inputOffer, sendMessage, playerFingerprint])

  // Respond to offers
  const respondToPlayer = useCallback((targetPlayer, accept) => {
    const response = accept ? "accept" : "reject"
    console.log(`🤔 Responding ${response} to ${targetPlayer}`)

    const success = sendMessage({
      action: "respond_to_offer",
      player_fingerprint: playerFingerprint,
      target_player: targetPlayer,
      response: response,
    })

    return success
  }, [sendMessage, playerFingerprint])

  // Helper to get current player info
  const isPlayer1 = gameState?.player1Fingerprint === playerFingerprint
  const isPlayer2 = gameState?.player2Fingerprint === playerFingerprint

  // Show loading spinner
  if (isInitializing || !matchId) {
    return (
      <div className="game-page">
        <div className="game-container">
          <div className="loading-section">
            <Loader2 className="loading-spinner" />
            <p>Initializing game…</p>
          </div>
        </div>
      </div>
    )
  }

  // Connection error
  if (error) {
    return (
      <div className="game-page">
        <div className="game-container">
          <div className="error-section">
            <XCircle className="error-icon" />
            <h2>Connection Error</h2>
            <p>{error}</p>
            <div className="debug-info">
              <p><strong>Your fingerprint:</strong> {playerFingerprint}</p>
              <p><strong>Match ID:</strong> {matchId}</p>
              {gameState && (
                <>
                  <p><strong>Player 1:</strong> {gameState.player1Fingerprint}</p>
                  <p><strong>Player 2:</strong> {gameState.player2Fingerprint}</p>
                  <p><strong>Game Mode:</strong> {gameState.gameMode}</p>
                  <p><strong>Current Round:</strong> {gameState.currentRound}</p>
                  <p><strong>Waiting for Opponent:</strong> {gameState.waitingForOpponent ? "Yes" : "No"}</p>
                  {gameState.currentRoundState && (
                    <>
                      <p><strong>P1 Offer Made:</strong> {gameState.currentRoundState.player1OfferMade ? "Yes" : "No"}</p>
                      <p><strong>P2 Offer Made:</strong> {gameState.currentRoundState.player2OfferMade ? "Yes" : "No"}</p>
                    </>
                  )}
                </>
              )}
            </div>
            <button onClick={() => navigate("/ultimatum")} className="menu-button">
              Back to Menu
            </button>
          </div>
        </div>
      </div>
    )
  }

  // Game over screen
  if (currentPhase === "result" && gameState?.gameOver) {
    return (
      <div className="game-over-page">
        <div className="game-over-container">
          <div className="game-over-header">
            <h1 className="game-over-title">Game Complete!</h1>
            <p>All {MAX_ROUNDS} rounds finished</p>
          </div>

          <div className="final-scores">
            <div className="score-card">
              <h3>Final Scores</h3>
              <div className="scores">
                <div className="score-item">
                  <span>Player 1:</span>
                  <span>${gameState.player1Score}</span>
                </div>
                <div className="score-item">
                  <span>Player 2:</span>
                  <span>${gameState.player2Score}</span>
                </div>
                <div className="score-item">
                  <span>Your Score:</span>
                  <span>${isPlayer1 ? gameState.player1Score : gameState.player2Score}</span>
                </div>
                <div className="score-item">
                  <span>Opponent Score:</span>
                  <span>${isPlayer1 ? gameState.player2Score : gameState.player1Score}</span>
                </div>
              </div>
            </div>
          </div>

          <div className="action-buttons">
            <button onClick={() => navigate("/ultimatum")} className="menu-button">
              Back to Menu
            </button>
          </div>

          <PayoffsTable history={gameState.roundHistory || []} />
        </div>
      </div>
    )
  }

  // Main game interface
  return (
    <div className="game-page">
      <div className="game-container">
        {/* Connection status */}
        <div className="connection-status">
          {connectionStatus === "connected" ? (
            <>
              <Wifi className="connection-icon connected" /> Connected
            </>
          ) : connectionStatus === "connecting" ? (
            <>
              <Loader2 className="connection-icon connecting" /> Connecting
            </>
          ) : (
            <>
              <WifiOff className="connection-icon disconnected" /> Disconnected
            </>
          )}
        </div>

        {/* Game header */}
        <div className="game-header">
          <h1 className="game-title simultaneous">Ultimatum Game </h1>
          <p className="game-subtitle">
            Round {gameState?.currentRound || 1} of {MAX_ROUNDS}
          </p>
          <p className="match-id">Match ID: {matchId}</p>
          <p className="player-id">You are: {isPlayer1 ? "Player 1" : isPlayer2 ? "Player 2" : "Unknown"}</p>
        </div>

        {/* Main game card */}
        <div className="game-board">
          <div className="game-card">
            <div className="game-card-header">
              <div className="timer">
                <Clock className="timer-icon" />
                <span>{timeLeft}s</span>
              </div>
              <h2 className="phase-title">
                {currentPhase === "offering" && "MAKE YOUR OFFER"}
                {currentPhase === "responding" && "RESPOND TO OFFERS"}
                {currentPhase === "waiting" && "WAITING…"}
                {currentPhase === "result" && "GAME COMPLETE"}
              </h2>
            </div>

            <div className="game-card-content">
              <div className="money-display">
                <div className="money-content">
                  <DollarSign className="money-icon" />
                  <span>{TOTAL_MONEY}</span>
                </div>
              </div>

              {/* Waiting for opponent to join */}
              {gameState?.waitingForOpponent && (
                <div className="waiting-section">
                  <div className="waiting-animation">
                    <Loader2 className="waiting-spinner" />
                    <p className="waiting-text">Waiting for opponent to join…</p>
                  </div>
                  <div className="debug-info">
                    <p><strong>Match ID:</strong> {matchId}</p>
                    <p><strong>Game Mode:</strong> {gameState.gameMode}</p>
                    <p><strong>Player 1:</strong> {gameState.player1Fingerprint || "None"}</p>
                    <p><strong>Player 2:</strong> {gameState.player2Fingerprint || "None"}</p>
                  </div>
                </div>
              )}

              {/* Offering phase */}
              {currentPhase === "offering" && !gameState?.waitingForOpponent && (
                <div className="offer-section">
                  <p className="offer-label">How much will you offer your opponent?</p>
                  <div className="offer-input-container">
                    <input
                      type="number"
                      value={inputOffer}
                      onChange={(e) => setInputOffer(e.target.value)}
                      min="0"
                      max={TOTAL_MONEY}
                      placeholder="0"
                      className="offer-input"
                      autoFocus
                    />
                    <div className="dollar-sign">$</div>
                  </div>
                  <button
                    onClick={submitOffer}
                    disabled={!inputOffer || +inputOffer < 0 || +inputOffer > TOTAL_MONEY}
                    className="submit-button"
                  >
                    SUBMIT OFFER
                  </button>
                  
                  {/* Show offer status */}
                  {gameState?.currentRoundState && (
                    <div className="simultaneous-offers">
                      <div className={`offer-status-card ${gameState.currentRoundState.player1OfferMade ? 'completed' : 'pending'}`}>
                        <div className="offer-status-title">Player 1 Offer</div>
                        <div className="offer-status-amount">
                          {gameState.currentRoundState.player1OfferMade ? `$${gameState.currentRoundState.player1Offer}` : "Pending..."}
                        </div>
                        <div className={`offer-status-indicator ${gameState.currentRoundState.player1OfferMade ? 'completed' : 'pending'}`}>
                          {gameState.currentRoundState.player1OfferMade ? "Complete" : "Waiting"}
                        </div>
                      </div>
                      
                      <div className={`offer-status-card ${gameState.currentRoundState.player2OfferMade ? 'completed' : 'pending'}`}>
                        <div className="offer-status-title">Player 2 Offer</div>
                        <div className="offer-status-amount">
                          {gameState.currentRoundState.player2OfferMade ? `$${gameState.currentRoundState.player2Offer}` : "Pending..."}
                        </div>
                        <div className={`offer-status-indicator ${gameState.currentRoundState.player2OfferMade ? 'completed' : 'pending'}`}>
                          {gameState.currentRoundState.player2OfferMade ? "Complete" : "Waiting"}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Responding phase */}
              {currentPhase === "responding" && gameState?.currentRoundState && (
                <div className="responding-section">
                  <h3>Respond to Offers:</h3>
                  
                  {/* Response to opponent's offer */}
                  {isPlayer1 && gameState.currentRoundState.player2Offer !== null && (
                    <div className="offer-response-card">
                      <div className="offer-display">
                        <p className="offer-label">Player 2 offers you:</p>
                        <p className="offer-amount-large">${gameState.currentRoundState.player2Offer}</p>
                        <div className="decision-info">
                          <p className="keep-amount">
                            If you accept: You get ${gameState.currentRoundState.player2Offer}
                          </p>
                          <p className="keep-amount">If you reject: You get $0</p>
                        </div>
                      </div>
                      
                      {!gameState.currentRoundState.player1ResponseMade && (
                        <div className="response-buttons">
                          <button
                            onClick={() => respondToPlayer("player_2", true)}
                            className="accept-button"
                          >
                            <CheckCircle className="button-icon" />
                            ACCEPT
                          </button>
                          <button
                            onClick={() => respondToPlayer("player_2", false)}
                            className="reject-button"
                          >
                            <XCircle className="button-icon" />
                            REJECT
                          </button>
                        </div>
                      )}
                      
                      {gameState.currentRoundState.player1ResponseMade && (
                        <p className="response-made">
                          You {gameState.currentRoundState.player1Response}ed this offer
                        </p>
                      )}
                    </div>
                  )}

                  {isPlayer2 && gameState.currentRoundState.player1Offer !== null && (
                    <div className="offer-response-card">
                      <div className="offer-display">
                        <p className="offer-label">Player 1 offers you:</p>
                        <p className="offer-amount-large">${gameState.currentRoundState.player1Offer}</p>
                        <div className="decision-info">
                          <p className="keep-amount">
                            If you accept: You get ${gameState.currentRoundState.player1Offer}
                          </p>
                          <p className="keep-amount">If you reject: You get $0</p>
                        </div>
                      </div>
                      
                      {!gameState.currentRoundState.player2ResponseMade && (
                        <div className="response-buttons">
                          <button
                            onClick={() => respondToPlayer("player_1", true)}
                            className="accept-button"
                          >
                            <CheckCircle className="button-icon" />
                            ACCEPT
                          </button>
                          <button
                            onClick={() => respondToPlayer("player_1", false)}
                            className="reject-button"
                          >
                            <XCircle className="button-icon" />
                            REJECT
                          </button>
                        </div>
                      )}
                      
                      {gameState.currentRoundState.player2ResponseMade && (
                        <p className="response-made">
                          You {gameState.currentRoundState.player2Response}ed this offer
                        </p>
                      )}
                    </div>
                  )}
                </div>
              )}

              {/* Waiting phase */}
              {currentPhase === "waiting" && !gameState?.waitingForOpponent && (
                <div className="waiting-section">
                  <div className="waiting-animation">
                    <Loader2 className="waiting-spinner" />
                    <p className="waiting-text">
                      {!gameState?.currentRoundState?.player1OfferMade || !gameState?.currentRoundState?.player2OfferMade
                        ? "Waiting for all offers to be made…"
                        : "Waiting for all responses…"}
                    </p>
                  </div>
                  
                  {/* Show current round status */}
                  {gameState?.currentRoundState && (
                    <div className="round-status">
                      <p>
                        <span>Offers:</span>
                        <span>
                          {gameState.currentRoundState.player1OfferMade ? "✓" : "⏳"} Player 1, {" "}
                          {gameState.currentRoundState.player2OfferMade ? "✓" : "⏳"} Player 2
                        </span>
                      </p>
                      <p>
                        <span>Responses:</span>
                        <span>
                          {gameState.currentRoundState.player1ResponseMade ? "✓" : "⏳"} Player 1, {" "}
                          {gameState.currentRoundState.player2ResponseMade ? "✓" : "⏳"} Player 2
                        </span>
                      </p>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Scores */}
        {gameState && !gameState.waitingForOpponent && (
          <div className="scores-section">
            <div className="score-item">
              <span>Your Score:</span>
              <span>
                ${isPlayer1 ? gameState.player1Score : gameState.player2Score}
              </span>
            </div>
            <div className="score-item">
              <span>Opponent Score:</span>
              <span>
                ${isPlayer1 ? gameState.player2Score : gameState.player1Score}
              </span>
            </div>
          </div>
        )}

        {/* Game history */}
        {gameState && gameState.roundHistory && gameState.roundHistory.length > 0 && (
          <div className="payoffs-area">
            <PayoffsTable history={gameState.roundHistory || []} />
          </div>
        )}

        {/* Debug info (only in development) */}
        {process.env.NODE_ENV === 'development' && gameState && (
          <div className="debug-info" style={{ marginTop: '2rem' }}>
            <h4>Debug Info:</h4>
            <p><strong>Current Phase:</strong> {currentPhase}</p>
            <p><strong>Is Player 1:</strong> {isPlayer1 ? "Yes" : "No"}</p>
            <p><strong>Is Player 2:</strong> {isPlayer2 ? "Yes" : "No"}</p>
            <p><strong>Connection Status:</strong> {connectionStatus}</p>
            {gameState.currentRoundState && (
              <>
                <p><strong>Round Number:</strong> {gameState.currentRoundState.roundNumber}</p>
                <p><strong>P1 Offer Made:</strong> {gameState.currentRoundState.player1OfferMade ? "Yes" : "No"}</p>
                <p><strong>P2 Offer Made:</strong> {gameState.currentRoundState.player2OfferMade ? "Yes" : "No"}</p>
                <p><strong>P1 Response Made:</strong> {gameState.currentRoundState.player1ResponseMade ? "Yes" : "No"}</p>
                <p><strong>P2 Response Made:</strong> {gameState.currentRoundState.player2ResponseMade ? "Yes" : "No"}</p>
              </>
            )}
          </div>
        )}
      </div>
    </div>
  )
}  and this is useWebSocket.js : import { useState, useEffect, useRef, useCallback } from "react"

export const useWebSocket = (matchId, playerFingerprint) => {
  const [socket, setSocket] = useState(null)
  const [gameState, setGameState] = useState(null)
  const [connectionStatus, setConnectionStatus] = useState("disconnected")
  const [error, setError] = useState(null)
  const [matchTerminated, setMatchTerminated] = useState(false)
  const reconnectTimeoutRef = useRef(null)
  const reconnectAttemptsRef = useRef(0)
  const connectionRef = useRef(null)
  const maxReconnectAttempts = 5

  const connect = useCallback(() => {
    if (!matchId || !playerFingerprint) {
      console.log("❌ Cannot connect: missing matchId or playerFingerprint")
      return
    }

    if (matchTerminated) {
      console.log("❌ Match was terminated - not reconnecting")
      return
    }

    if (connectionRef.current === "connecting" || connectionRef.current === "connected") {
      console.log("⚠️ Connection already in progress or established")
      return
    }

    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current)
      reconnectTimeoutRef.current = null
    }

    try {
      const wsUrl = `ws://localhost:8001/ws/ultimatum-game/${matchId}/`
      console.log("🔌 Connecting to WebSocket:", wsUrl)
      console.log("👤 Player fingerprint:", playerFingerprint)

      connectionRef.current = "connecting"
      setConnectionStatus("connecting")
      
      const ws = new WebSocket(wsUrl)

      ws.onopen = () => {
        console.log("✅ WebSocket connected successfully")
        setConnectionStatus("connected")
        connectionRef.current = "connected"
        setError(null)
        reconnectAttemptsRef.current = 0

        const joinMessage = {
          action: "join",
          player_fingerprint: playerFingerprint,
        }
        console.log("📤 Sending join message:", joinMessage)
        ws.send(JSON.stringify(joinMessage))
      }

      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          console.log("📥 Received WebSocket message:", data)

          if (data.match_terminated) {
            console.log("🚫 Match terminated:", data.reason)
            setMatchTerminated(true)
            setError(`Match ended: ${data.reason}`)
            reconnectAttemptsRef.current = maxReconnectAttempts
            return
          }

          if (data.error) {
            console.error("❌ Server error:", data.error)
            setError(data.error)
            
            const criticalErrors = ["full", "already started", "Cannot join match"]
            if (criticalErrors.some(err => data.error.includes(err))) {
              reconnectAttemptsRef.current = maxReconnectAttempts
            }
            return
          }

          if (data.game_state) {
            console.log("🎮 Game state update:", data.game_state)
            setGameState(data.game_state)
            
            if (data.game_state && !data.game_state.error) {
              setError(null)
            }
          }

          if (data.game_over) {
            console.log("🏁 Game over:", data)
            setGameState((prev) => ({
              ...prev,
              gameOver: true,
              player1Score: data.player1_score || 0,
              player2Score: data.player2_score || 0,
            }))
          }

          // Handle simultaneous game actions
          if (data.action) {
            console.log("🎯 Player action:", data)
            setGameState((prev) => {
              if (!prev) return prev

              const updated = { ...prev }

              if (data.action === "make_offer") {
                // Update the appropriate player's offer in current round state
                if (data.player_fingerprint === prev.player1Fingerprint) {
                  updated.currentRoundState = {
                    ...updated.currentRoundState,
                    player1OfferMade: true,
                    player1Offer: data.offer,
                  }
                } else if (data.player_fingerprint === prev.player2Fingerprint) {
                  updated.currentRoundState = {
                    ...updated.currentRoundState,
                    player2OfferMade: true,
                    player2Offer: data.offer,
                  }
                }
                console.log("💰 Offer made:", data.offer, "by player:", data.player_fingerprint)
              }

              if (data.action === "respond_to_offer") {
                // Update the appropriate response based on target_player
                if (data.player_fingerprint === prev.player1Fingerprint && data.target_player === "player_2") {
                  updated.currentRoundState = {
                    ...updated.currentRoundState,
                    player1ResponseMade: true,
                    player1Response: data.response,
                  }
                } else if (data.player_fingerprint === prev.player2Fingerprint && data.target_player === "player_1") {
                  updated.currentRoundState = {
                    ...updated.currentRoundState,
                    player2ResponseMade: true,
                    player2Response: data.response,
                  }
                }
                console.log("🤔 Response made:", data.response, "by player:", data.player_fingerprint, "to:", data.target_player)
              }

              return updated
            })
          }
        } catch (err) {
          console.error("❌ Error parsing WebSocket message:", err, event.data)
        }
      }

      ws.onclose = (event) => {
        console.log("🔌 WebSocket closed:", event.code, event.reason)
        setConnectionStatus("disconnected")
        connectionRef.current = "disconnected"
        setSocket(null)

        if (event.code === 4004) {
          setError("Match not found")
          console.log("🚫 Match not found - not attempting to reconnect")
          return
        }

        if (event.code === 4001) {
          setError("Match terminated by server")
          setMatchTerminated(true)
          console.log("🚫 Match terminated by server - not attempting to reconnect")
          return
        }

        if (matchTerminated) {
          console.log("🚫 Match terminated - not attempting to reconnect")
          return
        }

        if (event.code === 1000 || reconnectAttemptsRef.current >= maxReconnectAttempts) {
          console.log("🚫 Not attempting to reconnect")
          return
        }

        const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 10000)
        console.log(
          `🔄 Attempting to reconnect in ${delay}ms (attempt ${reconnectAttemptsRef.current + 1}/${maxReconnectAttempts})`
        )

        reconnectTimeoutRef.current = setTimeout(() => {
          reconnectAttemptsRef.current++
          connectionRef.current = "disconnected"
          connect()
        }, delay)
      }

      ws.onerror = (error) => {
        console.error("❌ WebSocket error:", error)
        setConnectionStatus("error")
        connectionRef.current = "error"
        
        if (error.code === "ECONNREFUSED") {
          setError("Cannot connect to game server")
        }
      }

      setSocket(ws)
    } catch (err) {
      console.error("❌ Failed to create WebSocket connection:", err)
      setError("Failed to connect to game server")
      setConnectionStatus("error")
      connectionRef.current = "error"
    }
  }, [matchId, playerFingerprint, matchTerminated])

  const disconnect = useCallback(() => {
    console.log("🔌 Disconnecting WebSocket")
    
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current)
      reconnectTimeoutRef.current = null
    }
    
    connectionRef.current = "disconnected"
    reconnectAttemptsRef.current = maxReconnectAttempts
    
    if (socket && socket.readyState !== WebSocket.CLOSED) {
      socket.close(1000, "Manual disconnect")
    }
    
    setSocket(null)
    setConnectionStatus("disconnected")
  }, [socket])

  const sendMessage = useCallback(
    (message) => {
      if (matchTerminated) {
        console.log("❌ Cannot send message: match terminated")
        return false
      }

      if (socket && socket.readyState === WebSocket.OPEN) {
        console.log("📤 Sending message:", message)
        socket.send(JSON.stringify(message))
        return true
      } else {
        console.error("❌ Cannot send message: WebSocket not connected")
        setError("Not connected to game server")
        return false
      }
    },
    [socket, matchTerminated],
  )

  useEffect(() => {
    if (matchId && playerFingerprint && !matchTerminated) {
      connect()
    }
    
    return () => {
      disconnect()
    }
  }, [matchId, playerFingerprint, matchTerminated])

  return {
    socket,
    gameState,
    connectionStatus,
    error,
    matchTerminated,
    sendMessage,
    connect,
    disconnect,
  }
}